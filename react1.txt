const App = () => {
  // teknisesti yo. on JavaScript-funktio, joka ei saa parametriä
  // joka sijoitetaan vakioarvoiseen muuttujaan App
  // yo. funktio palauttaa sisältämänsä arvon
  // React komponentti kirjoitetaan yl. JSX:llä (näyttää HTML)
  // komponentin sisältö käännettään suoritettaessa JavaScriptiksi
  // Babel hoitaa käännöksen
  // JSX lähellä Java Springin Thymeleafia

  console.log('Hello from komponentti')

  const now = new Date()
  const a = 10
  const b = 20
  console.log(now, a+b)

  return (
    // komponentti rendelöityy div-tagina
    <div>
      <p>Servus</p>
      <p>
        {a} plus {b} is {a+b}
      </p>
    </div>
  )
}

const määrittelee vakion
let määrittelee muuttujan

const t = [1, -1, 3] // taulukko on olio ja sisältöä voi muuttaa vaikka onkin const

console.log(t.length) // tulostuu 3
console.log(t[1])     // tulostuu -1

t.push(5)             // lisätään taulukkoon luku 5

console.log(t.length) // tulostuu 4

t.forEach(value => {
  console.log(value)  // tulostuu 1, -1, 3, 5 omille riveilleen
})      

Reactissa suositaan immutable rakenteita:

const t = [1, -1, 3]

const t2 = t.concat(5)
// luodaan uusi taulukko, jossa on vanhan sisällön lisäksi lisätty luku

console.log(t)  // tulostuu [1, -1, 3]
console.log(t2) // tulostuu [1, -1, 3, 5]

taulukon mappaus:
const t = [1, 2, 3]

const m1 = t.map(value => value * 2)
console.log(m1)   // tulostuu [2, 4, 6]


const m2 = t.map(value => '<li>' + value + '</li>')
console.log(m2)  
// tulostuu [ '<li>1</li>', '<li>2</li>', '<li>3</li>' ]


const t = [1, 2, 3, 4, 5]

const [first, second, ...rest] = t

console.log(first, second)  // tulostuu 1, 2
console.log(rest)          // tulostuu [3, 4 ,5]


OLIOLITERAALIT:

const object1 = {
  name: 'Arto Hellas',
  age: 35,
  education: 'Filosofian tohtori',
}

const object2 = {
  name: 'Full Stack -websovelluskehitys',
  level: 'aineopinto',
  size: 5,
}

const object3 = {
  name: {
    first: 'Juha',
    last: 'Tauriainen',
  },
  grades: [2, 3, 5, 3],
  department: 'TKTL',
}

console.log(object1.name)         // tulostuu Arto Hellas
const fieldName = 'age' 
console.log(object1[fieldName])    // tulostuu 35

object1.address = 'Tapiola'
object1['secret number'] = 12341

FUNKTIOT

const sum = (p1, p2) => {
  console.log(p1)
  console.log(p2)
  return p1 + p2
}


const result = sum(1, 5) // yksi lause, voidaan lyhentää
console.log(result) // kutsuminen


const square = p => {
  console.log(p)
  return p * p
}

// yo. ilman konsolitulostusta:
const square = p => p * p


const t = [1, 2, 3]
const tSquared = t.map(p => p * p)
// tSquared on nyt [1, 4, 9]

SAMT FUNKTIOTnuolinotaatiolla ja yhdenlauseen funktiona:

const bornYear = () => new Date().getFullYear() - age

const bornYear = () => {
  return new Date().getFullYear() - age
}

PROPSIEN käyttö funktioissa:

props = {
  name: 'Maya',
  age: 36,
}
...
const Hello = ({ name, age }) => { 
  const bornYear = () => new Date().getFullYear() - age

  return (
    <div>
      <p>
        Hello {name}, you are {age} years old
      </p>
      <p>So you were probably born {bornYear()}</p>
    </div>
  )
}

ON SAMA ASIA KUIN:
const Hello = (props) => {
  const name = props.name  
  const age = props.age
  const bornYear = () => new Date().getFullYear() - age
...


LASKURIsovellus napeilla:

import { useState } from 'react'

const Display = ({ counter }) => <div>{counter}</div>

const Button = ({ handleClick, text }) => (
  <button onClick={handleClick}>
    {text}
  </button>
)

const App = () => {
  const [counter, setCounter] = useState(0)
  console.log('rendering with counter value', counter)
  const increaseByOne = () => {
    console.log('increasing, value before', counter)    
    setCounter(counter + 1)
  }

  const decreaseByOne = () => { 
    console.log('decreasing, value before', counter)    
    setCounter(counter - 1)
  }

  const setToZero = () => {
    console.log('resetting to zero, value before', counter)    
    setCounter(0)
  }

  return (
    <div>
      <Display counter={counter} />
      <Button handleClick={increaseByOne} text="plus" />
      <Button handleClick={setToZero} text="zero" />
      <Button handleClick={decreaseByOne} text="minus" />
    </div>
  )
} 

